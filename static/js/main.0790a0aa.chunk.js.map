{"version":3,"sources":["images/cat.png","components/Card.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","state","selected","hovered","selectCard","bind","mouseEnter","mouseLeave","this","setState","option","props","options","map","key","className","disabled","onClick","onMouseEnter","onMouseLeave","name","src","require","alt","weight","description","React","Component","App","title","data","entry","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,iC,2HCmE5BC,G,wDA9DX,aAAe,IAAD,8BAChB,gBACKC,MAAQ,CACHC,UAAU,EACVC,SAAS,GAEb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBARR,E,yDAYVG,KAAKC,SAAS,CAACP,UAAYM,KAAKP,MAAMC,a,oCAIV,IAAxBM,KAAKP,MAAMC,UACXM,KAAKC,SAAS,CAACN,SAAS,M,mCAK5BK,KAAKC,SAAS,CAACN,SAAS,M,+BAIxB,IAAMO,EAASF,KAAKG,MAAMC,QAAQC,KAAI,SAAAH,GAAM,OAAI,wBAAII,IAAKJ,EAAQK,UAAU,gBAAgBL,MAC3F,OACI,yBAAKK,UAAU,aACX,yBAAKA,UAAWP,KAAKG,MAAMK,SAAW,gBAAkBR,KAAKP,MAAMC,SAAW,gBAAkB,OAC5Fe,QAAST,KAAKJ,WAAYc,aAAcV,KAAKF,WAAYa,aAAcX,KAAKD,YAE3EC,KAAKP,MAAMC,UAAYM,KAAKP,MAAME,QAC/B,0BAAMY,UAAU,2BAAhB,2FAEI,0BAAMA,UAAU,sBAAhB,gJAIR,wBAAIA,UAAU,eAAd,8CACA,0BAAMA,UAAU,cAAcP,KAAKG,MAAMS,MACzC,wBAAIL,UAAU,iBAAiBL,GAC/B,yBAAKK,UAAU,aACX,yBAAKM,IAAKC,EAAQ,IAAsBC,IAAI,MAAMR,UAAU,eAEhE,yBAAKA,UAAU,gBAAe,2BAAIP,KAAKG,MAAMa,QAAW,gDAE3DhB,KAAKG,MAAMK,SACR,uBAAGD,UAAU,4BAAb,qDAAmDP,KAAKG,MAAMS,KAA9D,kEAECZ,KAAKP,MAAMC,SAGR,uBAAGa,UAAU,qBAAqBP,KAAKG,MAAMc,aAFjD,uBAAGV,UAAU,qBAAb,uIAA4D,0BAAMA,UAAU,YAAYE,QAAST,KAAKJ,YAA1C,mC,GArD7DsB,IAAMC,YC8BVC,E,kDA3Bd,aAAe,IAAD,8BACb,gBACK3B,MAAQ,CACT4B,MAAO,qIACPC,KAAM,CACJ,CAAEV,KAAM,+CAAaK,YAAa,4LAAuCb,QAAS,CAAC,0CAAa,8EAAmBY,OAAQ,OAC3H,CAAEJ,KAAM,wCAAWK,YAAa,oPAAkDb,QAAS,CAAC,0CAAa,gFAAqBY,OAAQ,KACtI,CAAEJ,KAAM,wCAAWK,YAAa,8LAAyCb,QAAS,CAAC,2CAAc,qFAAqB,+FAAqBY,OAAQ,IAAKR,UAAU,KAP3J,E,qDAaX,OACE,yBAAKD,UAAU,OACX,4BAAKP,KAAKP,MAAM4B,OAChB,yBAAKd,UAAU,SACZP,KAAKP,MAAM6B,KAAKjB,KAAI,SAACkB,EAAMC,GAAP,OACnB,kBAAC,EAAD,iBAAWD,EAAX,CAAkBjB,IAAKkB,c,GApBnBN,IAAMC,WCQJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0790a0aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.b63f45d4.png\";","import React from 'react'\r\nimport './Card.scss'\r\n\r\nclass Card extends React.Component  {\r\n\r\n    constructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n            selected: false,\r\n            hovered: false\r\n        }\r\n        this.selectCard = this.selectCard.bind(this);\r\n        this.mouseEnter = this.mouseEnter.bind(this);\r\n        this.mouseLeave = this.mouseLeave.bind(this);\r\n    }\r\n\r\n    selectCard() {\r\n        this.setState({selected : !this.state.selected})\r\n    }\r\n\r\n    mouseEnter() {\r\n        if (this.state.selected === true) {\r\n            this.setState({hovered: true})\r\n        }\r\n    }\r\n\r\n    mouseLeave() {\r\n        this.setState({hovered: false})\r\n    }\r\n\r\n    render() {\r\n        const option = this.props.options.map(option => <li key={option} className=\"card__option\">{option}</li>);\r\n        return (\r\n            <div className='card-wrap'>\r\n                <div className={this.props.disabled ? 'card disabled' : this.state.selected ? 'card selected' : 'card'} \r\n                    onClick={this.selectCard} onMouseEnter={this.mouseEnter} onMouseLeave={this.mouseLeave}>\r\n                        \r\n                    {this.state.selected && this.state.hovered ? (\r\n                        <span className=\"card__title--small pink\">Котэ не одобряет?</span>\r\n                        ) : (\r\n                            <span className=\"card__title--small\">Сказочное заморское яство</span>\r\n                        )\r\n                    }\r\n                    \r\n                    <h2 className=\"card__title\">Нямушка</h2>\r\n                    <span className=\"card__name\">{this.props.name}</span>\r\n                    <ul className=\"card__options\">{option}</ul>\r\n                    <div className=\"card__img\">\r\n                        <img src={require('../images/cat.png')} alt=\"cat\" className=\"card__pic\"></img>\r\n                    </div>\r\n                    <div className=\"card__weight\"><p>{this.props.weight}</p><span>КГ</span></div>\r\n                </div>\r\n                {this.props.disabled ? (\r\n                    <p className=\"card__description yellow\">Печалька, {this.props.name} закончился.</p>\r\n                    ) :\r\n                    !this.state.selected ? (\r\n                    <p className=\"card__description\">Чего сидишь? Порадуй котэ, <span className=\"card__buy\" onClick={this.selectCard}>купи.</span></p>\r\n                    ) : (\r\n                        <p className=\"card__description\">{this.props.description}</p>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\nimport './App.scss';\nimport Card from './Card'\n\nclass App extends React.Component {\n\n constructor() {\n\t\tsuper();\n\t\tthis.state = {\n      title: 'Ты сегодня покормил кота?',\n      data: [\n        { name: 'с фуа-гра', description: 'Печень утки разварная с артишоками.', options: ['10 порций', 'мышь в подарок'], weight: '0,5' },\n        { name: 'с рыбой', description: 'Головы щучьи с чесноком да свежайшая сёмгушка.', options: ['40 порций', '2 мыши в подарок'], weight: '2' },\n        { name: 'с курой', description: 'Филе из цыплят с трюфелями в бульоне.', options: ['100 порций', '5 мышей в подарок', 'заказчик доволен'], weight: '5', disabled: true }\n      ]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n          <h1>{this.state.title}</h1>\n          <div className=\"cards\">\n            {this.state.data.map((entry,index) =>\n              <Card  {...entry} key={index}/>\n            )}\n          </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}